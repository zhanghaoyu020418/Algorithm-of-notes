# 数组和矩阵

### 把数组中的0移到末尾
**示例：**
>**输入: [0,1,0,3,12]**
       **输出: [1,3,12,0,0]**
```cpp
    void moveZeroes(vector<int>& nums) {
        int id = 0;
        //将非0的数放到数组的前面
        for (int i = 0; i < nums.size(); i++)
            if(nums[i] != 0)
                nums[id++] = nums[i];
        //前后的位置清零
        while (id < nums.size())
            nums[id++] = 0;
    }
```

### 重塑矩阵

==num[ 总个数 / 列数 ][总个数 % 列数]==
（一维数组变成二维数组）
```cpp
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        int n = nums.size(), m = nums[0].size();//n是原数组的行数，m是原数组的列数
        if(r * c != m * n)//如果原数组中的元素个数和现有元素中元素个数不同，则直接返回即可
            return nums;
        vector<vector<int>> res(r, vector<int>(c));

        for (int i = 0; i < r * c; i ++)
        {
            res[i / c][i % c] = nums[i / m][i % m];
        }
        return res;
    }
```
    ```cpp
         int index = 0;
         for (int i = 0; i < r; i ++)
         {
             for (int j = 0; j < c; j ++)
             {
                 res[i][j] = nums[index / m][index % m];
                 index ++;
             }
         }
        ```
### 连续1的个数
**示例：**
>输入：[1,1,0,1,1,1]
        输出：3
        解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.
```cpp
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int res = 0;
        int cnt = 0;
        for (int i = 0; i < nums.size(); i ++)
        {
            if(nums[i] == 1)
                cnt ++;
            else
                cnt = 0;
            res = max(res, cnt);
        }
        return res;
}
```

### 搜索二维数组（杨氏矩阵）

[ 1,  5,  9],
   	[10, 11, 13],
  	 [12, 13, 15].
元素的起始位置是矩阵的右上角,如果元素大了，就向右找，元素小了，向下找

```cpp
bool searchMatrix(vector<vector<int>>& a, int target) {
    int i = 0;
    int j = a[0].size() - 1;
    while (i < a.size() && j >= 0)//元素的起始位置是矩阵的右上角
    {
        if(a[i][j] == target)//先比较和target的大小
        {
            return true;
            break;
        }
        if(a[i][j] > target)
            j --;
        else
            i ++;
    }
    return false;
```